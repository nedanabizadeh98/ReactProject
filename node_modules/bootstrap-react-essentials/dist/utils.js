"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var querystring_1 = __importDefault(require("querystring"));
function getURLComponents(_a) {
    var pathname = _a.pathname, search = _a.search;
    var query;
    query = querystring_1.default.parse(search.substr(1));
    query = Object.entries(query).reduce(function (acc, _a) {
        var _b;
        var key = _a[0], value = _a[1];
        return (__assign(__assign({}, acc), (_b = {}, _b[key] = toArray(value), _b)));
    }, {});
    return { pathname: pathname, query: query };
}
exports.getURLComponents = getURLComponents;
/** This should take care of both hash and normal URLs. */
function getURLQuery(location) {
    return getURLComponents(location).query;
}
exports.getURLQuery = getURLQuery;
function toArray(value) {
    return value instanceof Array ? value : [value];
}
exports.toArray = toArray;
function replaceURLQuery(history, location, query) {
    var newQueryMap = Object.entries(query)
        .filter(function (_a) {
        var value = _a[1];
        return !!value && !!toArray(value).length;
    })
        .reduce(function (acc, _a) {
        var _b;
        var key = _a[0], value = _a[1];
        return (__assign(__assign({}, acc), (_b = {}, _b[key] = value, _b)));
    }, {});
    var merged = querystring_1.default.stringify(newQueryMap);
    merged = !!merged ? "?" + merged : location.pathname;
    history.replace(merged);
}
exports.replaceURLQuery = replaceURLQuery;
function appendURLQuery(history, location, urlQuery) {
    var existingURLQuery = __assign({}, getURLQuery(location));
    Object.entries(urlQuery).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (value !== undefined) {
            existingURLQuery[key] = toArray(value);
        }
        else {
            delete existingURLQuery[key];
        }
    });
    replaceURLQuery(history, location, existingURLQuery);
}
exports.appendURLQuery = appendURLQuery;
