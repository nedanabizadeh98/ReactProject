"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var querystring_1 = require("querystring");
var ts_mockito_1 = require("ts-mockito");
var testUtils_1 = require("./testUtils");
var utils_1 = require("./utils");
describe("Utilities", function () {
    it("Should get URL components with search correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var query, location, _a, resultPathName, resultQuery;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    query = { a: "1", b: "2" };
                    location = {
                        hash: "",
                        pathname: "/path/name",
                        search: "?" + querystring_1.stringify(query)
                    };
                    return [4 /*yield*/, utils_1.getURLComponents(location)];
                case 1:
                    _a = _b.sent(), resultPathName = _a.pathname, resultQuery = _a.query;
                    // Then
                    expect(resultPathName).toEqual("/path/name");
                    expect(resultQuery).toEqual({ a: ["1"], b: ["2"] });
                    return [2 /*return*/];
            }
        });
    }); });
    it("To array should work", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(utils_1.toArray(1)).toEqual([1]);
            expect(utils_1.toArray([1, 2, 3])).toEqual([1, 2, 3]);
            return [2 /*return*/];
        });
    }); });
    it("Replace URL query with search should work", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history, historyInstance, location;
        return __generator(this, function (_a) {
            history = ts_mockito_1.spy(testUtils_1.constructObject({
                replace: function () { }
            }));
            historyInstance = ts_mockito_1.instance(history);
            location = { pathname: "" };
            // When
            utils_1.replaceURLQuery(historyInstance, location, { a: "1", b: ["2", "3"] });
            utils_1.replaceURLQuery(historyInstance, location, {
                a: Array(0),
                b: Array(0),
                c: "10"
            });
            utils_1.replaceURLQuery(historyInstance, location, {});
            // Then
            ts_mockito_1.verify(history.replace("?a=1&b=2&b=3")).once();
            ts_mockito_1.verify(history.replace("?c=10")).once();
            ts_mockito_1.verify(history.replace("")).once();
            return [2 /*return*/];
        });
    }); });
    it("Replace URL query with empty search should default to pathname", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history, historyInstance, location;
        return __generator(this, function (_a) {
            history = ts_mockito_1.spy(testUtils_1.constructObject({
                replace: function () { }
            }));
            historyInstance = ts_mockito_1.instance(history);
            location = { pathname: "/path" };
            // When
            utils_1.replaceURLQuery(historyInstance, location, {});
            // Then
            ts_mockito_1.verify(history.replace("/path")).once();
            return [2 /*return*/];
        });
    }); });
    it("Append URL query with search should work", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history;
        return __generator(this, function (_a) {
            history = ts_mockito_1.spy(testUtils_1.constructObject({ replace: function () { } }));
            // When
            utils_1.appendURLQuery(ts_mockito_1.instance(history), { pathname: "", search: "?a=0" }, { a: "1", b: ["2", "3"] });
            utils_1.appendURLQuery(ts_mockito_1.instance(history), { pathname: "", search: "?a=0&b=1" }, {
                a: Array(0),
                b: Array(0),
                c: "10"
            });
            utils_1.appendURLQuery(ts_mockito_1.instance(history), { pathname: "", search: "?a=0&b=1" }, {});
            // Then
            ts_mockito_1.verify(history.replace("?a=1&b=2&b=3")).once();
            ts_mockito_1.verify(history.replace("?c=10")).once();
            ts_mockito_1.verify(history.replace("?a=0&b=1")).once();
            return [2 /*return*/];
        });
    }); });
    it("Append URL query with undefined values should remove keys", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history;
        return __generator(this, function (_a) {
            history = ts_mockito_1.spy(testUtils_1.constructObject({ replace: function () { } }));
            // When
            utils_1.appendURLQuery(ts_mockito_1.instance(history), { pathname: "", search: "?a=0" }, { a: undefined, b: "1" });
            // Then
            ts_mockito_1.verify(history.replace("?b=1")).once();
            return [2 /*return*/];
        });
    }); });
});
