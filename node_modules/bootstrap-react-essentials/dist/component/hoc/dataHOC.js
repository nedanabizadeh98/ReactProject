"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var recompose_1 = require("recompose");
var withStateHandlers_1 = __importDefault(require("recompose/withStateHandlers"));
var dataRepository_1 = __importDefault(require("../../repository/dataRepository"));
var utils_1 = require("../../utils");
var deepEqual = require("deep-equal");
function or(value1, value2) {
    return value1 !== undefined && value1 !== null ? value1 : value2;
}
/**
 * Automatically sync with current URL by requesting data from server using
 * said URL. This is assuming there is data provided by the server at current
 * URL, e.g. user navigates to /users/1, this will send a GET request to
 * /users/1, which should have a defined backend route that contains the
 * relevant data.
 *
 * This HOC is usually used for components rendered by a Route. Please make sure
 * when implementing the backend to handle these requests that it never returns
 * null/undefined (as per REST design standards).
 */
function urlDataSyncHOC(syncRepository, overrideConfig, queryParamsToObserve) {
    if (syncRepository === void 0) { syncRepository = dataRepository_1.default; }
    if (overrideConfig === void 0) { overrideConfig = {}; }
    if (queryParamsToObserve === void 0) { queryParamsToObserve = undefined; }
    function getSyncRepository(_a) {
        var _b = _a.syncRepository, injectedRepository = _b === void 0 ? syncRepository : _b;
        return injectedRepository;
    }
    function getOverrideConfiguration(_a) {
        var _b = _a.overrideConfiguration, overrideConfiguration = _b === void 0 ? overrideConfig : _b;
        return overrideConfiguration;
    }
    function getQueryParametersToWatch(_a) {
        var _b = _a.queryParametersToWatch, queryParametersToWatch = _b === void 0 ? queryParamsToObserve : _b;
        return queryParametersToWatch;
    }
    function callAPI(_a, callFn, successFn) {
        var onDataErrorEncountered = _a.onDataErrorEncountered, setDataError = _a.setDataError, setIsLoadingData = _a.setIsLoadingData;
        return __awaiter(this, void 0, void 0, function () {
            var res, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        setDataError(undefined);
                        setIsLoadingData(true);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, callFn()];
                    case 2:
                        res = _b.sent();
                        successFn(res);
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _b.sent();
                        setDataError(e_1);
                        !!onDataErrorEncountered && onDataErrorEncountered(e_1);
                        return [3 /*break*/, 5];
                    case 4:
                        setIsLoadingData(false);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function getData(_a, injectedLocation) {
        var location = _a.history.location, props = __rest(_a, ["history"]);
        var customLocation = injectedLocation || location;
        var onDataSynchronized = props.onDataSynchronized, setData = props.setData;
        return callAPI(props, function () {
            var syncRepository = getSyncRepository(props);
            var overrideConfig = getOverrideConfiguration(props);
            return syncRepository.get(customLocation, __assign({ url: customLocation.pathname }, overrideConfig));
        }, function (data) {
            setData(data);
            onDataSynchronized && onDataSynchronized(data);
        });
    }
    return recompose_1.compose(withStateHandlers_1.default(function () { return ({
        data: undefined,
        dataError: undefined,
        isLoadingData: false
    }); }, {
        setData: function () { return function (data) { return ({ data: data }); }; },
        setDataError: function () { return function (dataError) { return ({ dataError: dataError }); }; },
        setIsLoadingData: function () { return function (isLoadingData) { return ({ isLoadingData: isLoadingData }); }; }
    }), recompose_1.withProps(function (props) { return ({
        getData: function () { return getData(props); },
        /** When the history listener triggers, use the newest location. */
        getDataWithCustomLocation: function (l) { return getData(props, l); },
        saveData: function () {
            var data = props.data, location = props.history.location, setData = props.setData;
            callAPI(props, function () {
                var syncRepository = getSyncRepository(props);
                var overrideConfig = getOverrideConfiguration(props);
                return syncRepository.update(location, data, overrideConfig);
            }, setData);
        },
        updateData: function (newData) {
            var data = props.data, setData = props.setData;
            setData(Object.assign({}, data, newData));
        }
    }); }), recompose_1.lifecycle((function () {
        var stateListener = undefined;
        return {
            componentDidMount: function () {
                var _this = this;
                var history = this.props.history;
                var oldQuery = utils_1.getURLQuery(history.location);
                stateListener = history.listen(function (l, a) {
                    if (a !== "REPLACE")
                        return;
                    var shouldRefetch = true;
                    var newQuery = utils_1.getURLQuery(l);
                    var observeParams = getQueryParametersToWatch(_this.props);
                    if (!!observeParams) {
                        shouldRefetch = observeParams.some(function (key) { return !deepEqual(newQuery[key], oldQuery[key]); });
                    }
                    oldQuery = newQuery;
                    if (!!shouldRefetch)
                        _this.props.getDataWithCustomLocation(l);
                });
            },
            componentWillUnmount: function () {
                !!stateListener && stateListener();
            }
        };
    })()));
}
exports.urlDataSyncHOC = urlDataSyncHOC;
/**
 * This HOC automatically manages pagination data sync, and is best used to
 * display table data. For other kinds of data use the data sync HOC.
 */
function urlCursorPaginatedSyncHOC(syncRepository, overrideConfig, appendURLQuery) {
    if (syncRepository === void 0) { syncRepository = dataRepository_1.default; }
    if (overrideConfig === void 0) { overrideConfig = {}; }
    if (appendURLQuery === void 0) { appendURLQuery = utils_1.appendURLQuery; }
    return recompose_1.compose(urlDataSyncHOC(syncRepository, overrideConfig), recompose_1.withProps(function (props) { return ({
        goToNextPage: function () {
            var data = props.data, history = props.history, location = props.location;
            var next = or(data, { next: undefined }).next;
            appendURLQuery(history, location, { next: next, previous: undefined });
        },
        goToPreviousPage: function () {
            var data = props.data, history = props.history, location = props.location;
            var previous = or(data, { previous: undefined }).previous;
            appendURLQuery(history, location, { next: undefined, previous: previous });
        }
    }); }), recompose_1.withProps(function (_a) {
        var data = _a.data;
        var _b = or(data, { results: [] }), hasNext = _b.hasNext, hasPrevious = _b.hasPrevious, limit = _b.limit, order = _b.order, results = _b.results, sortField = _b.sortField;
        return {
            data: or(results, []),
            hasNext: hasNext,
            hasPrevious: hasPrevious,
            limit: limit,
            order: order,
            sortField: sortField
        };
    }));
}
exports.urlCursorPaginatedSyncHOC = urlCursorPaginatedSyncHOC;
