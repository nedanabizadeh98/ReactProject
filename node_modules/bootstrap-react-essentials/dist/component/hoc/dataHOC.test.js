"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var enzyme_1 = require("enzyme");
var history_1 = require("history");
var react_1 = __importDefault(require("react"));
var react_router_dom_1 = require("react-router-dom");
var recompose_1 = require("recompose");
var ts_mockito_1 = require("ts-mockito");
var testUtils_1 = require("../../testUtils");
var dataHOC_1 = require("./dataHOC");
describe("Auto URL data sync", function () {
    var TestComponent = testUtils_1.createTestComponent();
    var EnhancedComponent;
    var WrappedElement;
    var history;
    var repository;
    beforeEach(function () {
        history = history_1.createBrowserHistory();
        repository = ts_mockito_1.spy({
            get: function () { return Promise.reject(""); },
            update: function () { return Promise.reject(""); }
        });
        EnhancedComponent = recompose_1.compose(react_router_dom_1.withRouter, dataHOC_1.urlDataSyncHOC(ts_mockito_1.instance(repository)))(TestComponent);
        WrappedElement = (react_1.default.createElement(react_router_dom_1.Router, { history: history },
            react_1.default.createElement(EnhancedComponent, null)));
    });
    afterEach(function () {
        history.push("/");
    });
    it("Should perform get correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var data, onDataSynchronized, wrapper, getData, _a, result, isLoadingData;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    data = { a: 0, b: 1, c: 2 };
                    onDataSynchronized = jest.fn();
                    ts_mockito_1.when(repository.get(ts_mockito_1.anything(), ts_mockito_1.anything())).thenResolve(data);
                    WrappedElement = (react_1.default.createElement(react_router_dom_1.Router, { history: history },
                        react_1.default.createElement(EnhancedComponent, { onDataSynchronized: onDataSynchronized })));
                    history.push("/pathname");
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    getData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _b.sent();
                    wrapper.setProps({});
                    _a = wrapper.find(TestComponent).props(), result = _a.data, isLoadingData = _a.isLoadingData;
                    // Then
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/pathname" }))).once();
                    expect(isLoadingData).toBeFalsy();
                    expect(result).toEqual(data);
                    expect(onDataSynchronized).toHaveBeenCalledWith(data);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should perform save correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var newData, wrapper, updateData, saveData, loading1, _a, result, loading2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    newData = { a: 1, b: 2, c: 3 };
                    ts_mockito_1.when(repository.update(ts_mockito_1.anything(), ts_mockito_1.anything(), ts_mockito_1.anything())).thenResolve(newData);
                    wrapper = enzyme_1.mount(WrappedElement);
                    updateData = wrapper.find(TestComponent).props().updateData;
                    updateData(newData);
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _b.sent();
                    wrapper.setProps({});
                    saveData = wrapper.find(TestComponent).props().saveData;
                    saveData();
                    wrapper.setProps({});
                    loading1 = wrapper.find(TestComponent).props().isLoadingData;
                    expect(loading1).toBeTruthy();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 2:
                    _b.sent();
                    wrapper.setProps({});
                    _a = wrapper
                        .find(TestComponent)
                        .props(), result = _a.data, loading2 = _a.isLoadingData;
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 3:
                    _b.sent();
                    // Then
                    ts_mockito_1.verify(repository.update(ts_mockito_1.anything(), ts_mockito_1.deepEqual(newData), ts_mockito_1.deepEqual({}))).once();
                    expect(loading2).toBeFalsy();
                    expect(result).toEqual(newData);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should set error when getting data fails", function () { return __awaiter(void 0, void 0, void 0, function () {
        var error, onDataErrorEncountered, wrapper, getData, dataError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    error = new Error("error!");
                    ts_mockito_1.when(repository.get(ts_mockito_1.anything(), ts_mockito_1.anything())).thenReject(error);
                    onDataErrorEncountered = jest.fn();
                    // When
                    WrappedElement = (react_1.default.createElement(react_router_dom_1.Router, { history: history },
                        react_1.default.createElement(EnhancedComponent, { onDataErrorEncountered: onDataErrorEncountered })));
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    return [4 /*yield*/, getData()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 2:
                    _a.sent();
                    wrapper.setProps({});
                    dataError = wrapper.find(TestComponent).props().dataError;
                    // Then
                    expect(dataError).toEqual(error);
                    expect(onDataErrorEncountered).toHaveBeenCalledWith(error);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should set error when saving fails", function () { return __awaiter(void 0, void 0, void 0, function () {
        var error, wrapper, saveData, dataError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    error = new Error("error!");
                    ts_mockito_1.when(repository.get(ts_mockito_1.anything(), ts_mockito_1.anything())).thenResolve({});
                    ts_mockito_1.when(repository.update(ts_mockito_1.anything(), ts_mockito_1.anything(), ts_mockito_1.anything())).thenReject(error);
                    wrapper = enzyme_1.mount(WrappedElement);
                    saveData = wrapper.find(TestComponent).props().saveData;
                    saveData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    wrapper.setProps({});
                    dataError = wrapper.find(TestComponent).props().dataError;
                    // Then
                    expect(dataError).toEqual(error);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should get data on URL state changes", function () { return __awaiter(void 0, void 0, void 0, function () {
        var wrapper;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    wrapper = enzyme_1.mount(WrappedElement);
                    // When
                    history.push("/path1");
                    history.replace("/path2");
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    wrapper.unmount();
                    /** After unmount, check if callback is still being executed. */
                    history.replace("/path2");
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 2:
                    _a.sent();
                    // Then
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/path1" }))).never();
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/path2" }))).once();
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should only get data if observed query param values change", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Setup
                    history.replace("/path1?d=1");
                    WrappedElement = (react_1.default.createElement(react_router_dom_1.Router, { history: history },
                        react_1.default.createElement(EnhancedComponent, { queryParametersToWatch: ["a", "b", "c"] })));
                    enzyme_1.mount(WrappedElement);
                    // When
                    history.replace("/path1?d=1");
                    history.replace("/path2?a=1");
                    history.replace("/path2?a=1&b=2");
                    history.replace("/path2?a=1&b=2&c=3");
                    history.replace("/path2?a=1&b=2&c=3");
                    history.replace("/path2?a=1&b=2&c=3");
                    history.replace("/path2?a=1&b=2&c=3");
                    history.replace("/path2?a=1&b=2&c=3");
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    // Then
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/path1" }))).never();
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/path2" }))).times(3);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should get data every time if observed query params not specified", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Setup
                    enzyme_1.mount(WrappedElement);
                    // When
                    history.replace("/path1?d=1");
                    history.replace("/path2?a=1");
                    history.replace("/path2?a=1");
                    history.replace("/path2?a=1");
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    // Then
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/path1" }))).once();
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/path2" }))).times(3);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should not refetch data every time if empty-array query params", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Setup
                    WrappedElement = (react_1.default.createElement(react_router_dom_1.Router, { history: history },
                        react_1.default.createElement(EnhancedComponent, { queryParametersToWatch: [] })));
                    enzyme_1.mount(WrappedElement);
                    // When
                    history.replace("/path1?d=1");
                    history.replace("/path2?a=1");
                    history.replace("/path2?a=1");
                    history.replace("/path2?a=1");
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    // Then
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything(), ts_mockito_1.anything())).never();
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should use injected sync repository if possible", function () { return __awaiter(void 0, void 0, void 0, function () {
        var injectedRepository, wrapper, getData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    injectedRepository = ts_mockito_1.spy({
                        get: function () { return Promise.resolve({}); },
                        update: function () { return Promise.reject(""); }
                    });
                    // When
                    WrappedElement = (react_1.default.createElement(react_router_dom_1.BrowserRouter, null,
                        react_1.default.createElement(EnhancedComponent, { syncRepository: ts_mockito_1.instance(injectedRepository) })));
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    getData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    // Then
                    ts_mockito_1.verify(injectedRepository.get(ts_mockito_1.anything(), ts_mockito_1.deepEqual({ url: "/" }))).once();
                    ts_mockito_1.verify(repository.get(ts_mockito_1.anything())).never();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("URL paginated data sync", function () {
    var TestComponent = testUtils_1.createTestComponent(dataHOC_1.urlCursorPaginatedSyncHOC);
    var EnhancedComponent;
    var WrappedElement;
    var appendURLQuery;
    var urlDataSync;
    beforeEach(function () {
        appendURLQuery = jest.fn();
        urlDataSync = ts_mockito_1.spy({
            get: function () { return Promise.reject(""); },
            update: function () { return Promise.reject(""); }
        });
        EnhancedComponent = recompose_1.compose(react_router_dom_1.withRouter, dataHOC_1.urlCursorPaginatedSyncHOC(ts_mockito_1.instance(urlDataSync), {}, appendURLQuery))(TestComponent);
        WrappedElement = (react_1.default.createElement(react_router_dom_1.BrowserRouter, null,
            react_1.default.createElement(EnhancedComponent, null)));
    });
    it("Should go to next page correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var wrapper, getData, goToNextPage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Setup
                    ts_mockito_1.when(urlDataSync.get(ts_mockito_1.anything(), ts_mockito_1.anything())).thenResolve({
                        results: [],
                        next: "next",
                        previous: "previous"
                    });
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    getData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    wrapper.setProps({});
                    goToNextPage = wrapper.find(TestComponent).props().goToNextPage;
                    goToNextPage();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 2:
                    _a.sent();
                    // Then
                    expect(appendURLQuery).toHaveBeenCalledWith(expect.anything(), expect.anything(), {
                        next: "next",
                        previous: undefined
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should go to previous page correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
        var wrapper, getData, goToPreviousPage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Setup
                    ts_mockito_1.when(urlDataSync.get(ts_mockito_1.anything(), ts_mockito_1.anything())).thenResolve({
                        results: [],
                        next: "next",
                        previous: "previous"
                    });
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    getData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    wrapper.setProps({});
                    goToPreviousPage = wrapper.find(TestComponent).props().goToPreviousPage;
                    goToPreviousPage();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 2:
                    _a.sent();
                    // Then
                    expect(appendURLQuery).toHaveBeenCalledWith(expect.anything(), expect.anything(), {
                        next: undefined,
                        previous: "previous"
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should map data to array", function () { return __awaiter(void 0, void 0, void 0, function () {
        var results, hasNext, hasPrevious, limit, order, sortField, wrapper, getData, _a, data, resultHasNext, resultHasPrevious, resultLimit, resultOrder, resultSortField;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    results = [1, 2, 3];
                    hasNext = true;
                    hasPrevious = true;
                    limit = 1000;
                    order = "ascend";
                    sortField = "abc";
                    ts_mockito_1.when(urlDataSync.get(ts_mockito_1.anything(), ts_mockito_1.anything())).thenResolve({
                        hasNext: hasNext,
                        hasPrevious: hasPrevious,
                        limit: limit,
                        order: order,
                        results: results,
                        sortField: sortField
                    });
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    getData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _b.sent();
                    wrapper.setProps({});
                    _a = wrapper.find(TestComponent).props(), data = _a.data, resultHasNext = _a.hasNext, resultHasPrevious = _a.hasPrevious, resultLimit = _a.limit, resultOrder = _a.order, resultSortField = _a.sortField;
                    // Then
                    expect(data).toEqual(results);
                    expect(resultHasNext).toEqual(hasNext);
                    expect(resultHasPrevious).toEqual(hasPrevious);
                    expect(resultLimit).toEqual(limit);
                    expect(resultOrder).toEqual(order);
                    expect(resultSortField).toEqual(sortField);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should give default result array if data is falsy", function () { return __awaiter(void 0, void 0, void 0, function () {
        var wrapper, getData, _a, data, hasNext, hasPrevious, limit, order, sortField;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    // Setup
                    ts_mockito_1.when(urlDataSync.get(ts_mockito_1.anything())).thenResolve(null);
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    getData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _b.sent();
                    wrapper.setProps({});
                    _a = wrapper.find(TestComponent).props(), data = _a.data, hasNext = _a.hasNext, hasPrevious = _a.hasPrevious, limit = _a.limit, order = _a.order, sortField = _a.sortField;
                    // Then
                    expect(data).toEqual([]);
                    expect(hasNext).toEqual(undefined);
                    expect(hasPrevious).toEqual(undefined);
                    expect(limit).toEqual(undefined);
                    expect(order).toEqual(undefined);
                    expect(sortField).toEqual(undefined);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Should give default result array if results are falsy", function () { return __awaiter(void 0, void 0, void 0, function () {
        var wrapper, getData, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Setup
                    ts_mockito_1.when(urlDataSync.get(ts_mockito_1.anything())).thenResolve({ results: null });
                    wrapper = enzyme_1.mount(WrappedElement);
                    getData = wrapper.find(TestComponent).props().getData;
                    getData();
                    return [4 /*yield*/, testUtils_1.asyncTimeout(1)];
                case 1:
                    _a.sent();
                    wrapper.setProps({});
                    data = wrapper.find(TestComponent).props().data;
                    // Then
                    expect(data).toEqual([]);
                    return [2 /*return*/];
            }
        });
    }); });
});
