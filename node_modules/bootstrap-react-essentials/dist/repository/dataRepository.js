"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var httpClient_1 = __importDefault(require("../http/httpClient"));
var utils_1 = require("../utils");
/** This repository allows synchronization of data with current URL. */
function createURLDataSyncRepository(client) {
    function urlParams() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return utils_1.getURLQuery.apply(void 0, args);
    }
    function prepareConfig(_a, _b) {
        if (_a === void 0) { _a = {}; }
        if (_b === void 0) { _b = {}; }
        var defaultHeaders = _a.headers, defaultParams = _a.params, defaultConfig = __rest(_a, ["headers", "params"]);
        var headers = _b.headers, params = _b.params, config = __rest(_b, ["headers", "params"]);
        return __assign(__assign(__assign({}, defaultConfig), config), { headers: __assign(__assign({}, defaultHeaders), headers), params: __assign(__assign({}, defaultParams), params) });
    }
    var urlDataSync = {
        get: function (location, overrideConfig) {
            var config = prepareConfig({
                method: "get",
                params: urlParams(location)
            }, overrideConfig);
            return client.fetch(config);
        },
        update: function (location, data, overrideConfig) {
            var config = prepareConfig({
                data: data,
                method: "patch",
                params: urlParams(location)
            }, overrideConfig);
            return client.fetch(config);
        }
    };
    return urlDataSync;
}
exports.createURLDataSyncRepository = createURLDataSyncRepository;
/* istanbul ignore next */
exports.default = createURLDataSyncRepository(httpClient_1.default);
