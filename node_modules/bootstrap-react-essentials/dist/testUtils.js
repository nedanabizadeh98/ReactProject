"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var redux_1 = require("redux");
/* istanbul ignore next */
function asyncTimeout(ms) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new Promise(function (resolve) {
        setTimeout.apply(void 0, __spreadArrays([resolve, ms], args));
    });
}
exports.asyncTimeout = asyncTimeout;
/* istanbul ignore next */
/** Create a test store that overrides some properties from the base store. */
function createTestStore(dispatch, initialState) {
    var store = redux_1.createStore(function (state) { return state; }, initialState);
    return __assign(__assign({}, store), { dispatch: !!dispatch
            ? function (a) {
                dispatch(a);
                return a;
            }
            : store.dispatch });
}
exports.createTestStore = createTestStore;
/* istanbul ignore next */
function createTestComponent(enhance) {
    return function (props) {
        // console.info("Props for test component:\n", props);
        return react_1.default.createElement("div", null);
    };
}
exports.createTestComponent = createTestComponent;
/**
 * Construct a full object from a partial object. Should only be used during
 * testing.
 */
function constructObject(object) {
    return object;
}
exports.constructObject = constructObject;
